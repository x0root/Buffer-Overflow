import subprocess

def display_banner():
    banner = """
     +-+-+-+-+-+-+ +-+-+-+-+-+-+-+
     |B|u|f|f|e|r| |e|x|p|l|o|i|t|
     +-+-+-+-+-+-+ +-+-+-+-+-+-+-+
    """
    print(banner)

def inject_command(command):
    """Simulates injecting a command and returns the output."""
    try:
        print(f"Injecting command: {command}")
        # Execute the command and capture the output
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.stdout.strip()
    except Exception as e:
        return f"Failed to execute injected command: {e}"

def get_machine_info():
    """Collects machine information like IP, hostname, and system details."""
    info = {}

    # Hostname
    info['Hostname'] = inject_command("hostname")

    # IP Address (depending on system, use ifconfig or ip addr)
    ip_info = inject_command("ifconfig" if subprocess.run("command -v ifconfig", shell=True).returncode == 0 else "ip addr")
    info['IP Address'] = ip_info

    # System Info (uname -a)
    info['System Info'] = inject_command("uname -a")

    # Disk Usage
    info['Disk Usage'] = inject_command("df -h")

    # CPU Info (depending on system, check if /proc/cpuinfo exists)
    info['CPU Info'] = inject_command("cat /proc/cpuinfo" if subprocess.run("test -f /proc/cpuinfo", shell=True).returncode == 0 else "sysctl -n machdep.cpu.brand_string")

    # Memory Info
    info['Memory Info'] = inject_command("free -h")

    # Return all collected information
    return info

def simulate_large_buffer():
    """Simulates a buffer overflow with a larger buffer size."""
    buffer_size = 1000  # Setting the buffer size to 1000 bytes
    buffer = bytearray(buffer_size)  # Creating a large buffer
    
    # Here, you can simulate NOP sled, return address overwriting, etc.
    print(f"Buffer size: {len(buffer)} bytes")
    # Fill buffer with a simulated payload
    nop_sled_size = 200  # Simulate a NOP sled in the first 200 bytes
    shellcode = b"/bin/sh"  # This could be a placeholder for actual shellcode
    return_address = b"\xde\xad\xbe\xef"  # Placeholder for return address

    # Building the buffer with NOP sled, shellcode, and return address
    buffer[:nop_sled_size] = b"\x90" * nop_sled_size  # NOP sled
    buffer[nop_sled_size:nop_sled_size+len(shellcode)] = shellcode  # Shellcode injection
    buffer[-4:] = return_address  # Overwrite return address

    # Output the buffer structure for demonstration purposes
    print(f"Buffer (first 50 bytes): {buffer[:50]}")
    print(f"Buffer (last 50 bytes): {buffer[-50:]}")

if __name__ == "__main__":
    # Display banner first
    display_banner()

    # Simulate buffer overflow with a large buffer
    simulate_large_buffer()

    # Get machine information
    machine_info = get_machine_info()

    # Print the collected machine information
    for key, value in machine_info.items():
        print(f"\n--- {key} ---\n{value}")